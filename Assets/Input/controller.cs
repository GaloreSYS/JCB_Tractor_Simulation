//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""controller"",
    ""maps"": [
        {
            ""name"": ""VRController"",
            ""id"": ""ed2bb163-8360-407d-940c-f50ff453281f"",
            ""actions"": [
                {
                    ""name"": ""SteeringRotation"",
                    ""type"": ""Value"",
                    ""id"": ""4c720817-f2e0-4cc6-a5e8-673d8936566e"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b6edcd6a-01de-4605-8603-172056a2f166"",
                    ""path"": ""<ViveController>{RightHand}/pointer/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteeringRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VRController
        m_VRController = asset.FindActionMap("VRController", throwIfNotFound: true);
        m_VRController_SteeringRotation = m_VRController.FindAction("SteeringRotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VRController
    private readonly InputActionMap m_VRController;
    private List<IVRControllerActions> m_VRControllerActionsCallbackInterfaces = new List<IVRControllerActions>();
    private readonly InputAction m_VRController_SteeringRotation;
    public struct VRControllerActions
    {
        private @Controller m_Wrapper;
        public VRControllerActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @SteeringRotation => m_Wrapper.m_VRController_SteeringRotation;
        public InputActionMap Get() { return m_Wrapper.m_VRController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRControllerActions set) { return set.Get(); }
        public void AddCallbacks(IVRControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_VRControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VRControllerActionsCallbackInterfaces.Add(instance);
            @SteeringRotation.started += instance.OnSteeringRotation;
            @SteeringRotation.performed += instance.OnSteeringRotation;
            @SteeringRotation.canceled += instance.OnSteeringRotation;
        }

        private void UnregisterCallbacks(IVRControllerActions instance)
        {
            @SteeringRotation.started -= instance.OnSteeringRotation;
            @SteeringRotation.performed -= instance.OnSteeringRotation;
            @SteeringRotation.canceled -= instance.OnSteeringRotation;
        }

        public void RemoveCallbacks(IVRControllerActions instance)
        {
            if (m_Wrapper.m_VRControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVRControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_VRControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VRControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VRControllerActions @VRController => new VRControllerActions(this);
    public interface IVRControllerActions
    {
        void OnSteeringRotation(InputAction.CallbackContext context);
    }
}
